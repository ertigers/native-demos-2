{"id":"promise.html","dependencies":[{"name":"C:\\Users\\lyh\\package.json","includedInParent":true,"mtime":1622876944327}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Promise</title>\r\n</head>\r\n<body>\r\n  <h1>手写Promise</h1>  \r\n  <h2>Promise是一个异步操作返回的对象，用来传递异步操作的消息</h2>\r\n  <p>1、解决回调地狱，代码易于维护</p>\r\n  <p>2、合并多个异步请求</p>\r\n  <h2>尝试实现Promise</h2>\r\n  <p>Promise有三种状态：Pending初始态，Fulfilled成功态，Rejected失败态</p>\r\n\r\n  <script>var _this = this;\n\nvar Promise1 = function Promise1(executor) {\n  var self = _this;\n  self.status = \"pending\";\n  self.value = undefined;\n  self.reason = undefined;\n\n  var resolve = function resolve(value) {\n    if (self.status === \"pending\") {\n      self.status = \"resolve\";\n      self.value = value;\n    }\n  };\n\n  var reject = function reject(reason) {\n    if (self.status === \"pending\") {\n      self.status = \"reject\";\n      self.reason = reason;\n    }\n  };\n\n  try {\n    executor(resolve, reject);\n  } catch (e) {\n    reject(e);\n  }\n};\n\nPromise1.prototype.then = function (onFufiled, onRejected) {\n  var self = _this;\n\n  if (self.status === \"resolve\") {\n    onFufiled(self.value);\n  }\n\n  if (self.status === \"reject\") {\n    onRejected(self.reason);\n  }\n};\n\nvar promise = new Promise1(function (resolve, reject) {\n  resolve(1000);\n});\npromise.then(function (data) {\n  console.log('data:', data);\n}, function (err) {\n  console.log('err:', err);\n});</script>\r\n</body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"327d8019db1d8ccd7a6759dcdc0ecee3","cacheData":{"env":{}}}